/*=======================寄存器映射======================*/
/* 51里面让RA口输出高电平 */

#include<reg51.h>

sfr PA0 0x80
PA0 = 0xFF;


/* stm32里面让RF口输出高电平 */

/* 寄存器映射 */

/*
* 寄存器映射就是对芯片里面的某一个具有特殊功能的内存单元
* 取一个别名的过程就叫做寄存器映射
  */
* (  unsigned int * )0x40021414 = 0xFFFF;

#define GPIOF_ODR  *( unsigned int * )0x40021414
GPIOF_ODR = 0xFFFF;


/*  存储器映射   */
给存储器分配地址的过程叫做储存器映射，再分配一个地址叫做重映射。

/*================C语言 对寄存器的封装====================*/

把连着的寄存器地址封装成一个个结构体，定义好结构体的第一个寄存器地址，就知道结构体的其他地址。（这样就省略了偏移地址）

#define GPIOF_BASE   （0x40021400）

/* 定义每一个寄存器地址，太过繁琐 */
#define GPIOF_MODER               *(unsigned int    *)(GPIOF_BASE+0x00)
#define GPIOF_OTYPER               *(unsigned int    *)(GPIOF_BASE+0x00)
#define GPIOF_OSPEEDR            *(unsigned int    *)(GPIOF_BASE+0x00)
#define GPIOF_PUPDR                *(unsigned int    *)(GPIOF_BASE+0x00)
#define GPIOF_IDR                      *(unsigned int    *)(GPIOF_BASE+0x00)
#define GPIOF_ODR                    *(unsigned int    *)(GPIOF_BASE+0x00)
... ...

/* 用一个结构体定义一个外设的寄存器，打包 */
typedef struct
{
	unit32_t MODER;
	unit32_t OTYPER;
	unit32_t OSPEEDR;
	unit32_t PUPDR;
	unit32_t IDR;
	unit32_t ODR;
	... ...
}GPIO_TypeDef;

/* 定义一个外设的基地址 */
#define GPIOA_BASE	(0x40020000)
#define GPIOB_BASE	(0x40020400)
#define GPIOC_BASE	(0x40020800)
#define GPIOD_BASE	(0x40020C00)
#define GPIOE_BASE	(0x40021000)
#define GPIOF_BASE	(0x40021400)

/* 用结构体地址代替unsigned int* */
#define GPIOA		(GPIO_TypeDef  *)GPIOA_BASE
#define GPIOB		(GPIO_TypeDef  *)GPIOB_BASE
#define GPIOC		(GPIO_TypeDef  *)GPIOC_BASE
#define GPIOD		(GPIO_TypeDef  *)GPIOD_BASE
#define GPIOE		(GPIO_TypeDef  *)GPIOE_BASE
#define GPIOF		(GPIO_TypeDef  *)GPIOF_BASE

















