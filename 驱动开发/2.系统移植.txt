================================================
一、搭建交叉开发环境
二、bootloader的选择和移植
三、kernel的配置、编译、和移植
四、根文件系统的制作
================================================
一、搭建交叉开发环境
交叉编译器中“交叉”的意思就是在一个架构上编译另外一个架构的代码，相当于两种架构“交叉”起来了。

在我们嵌入式开发中：就是在开发主机上(通常是我的pc机)开发出能够在目标机(通常是我们的开发板)上运行的程序。

为啥搭建交叉开发环境？
因为我们的开发板，是一个原始的状态，没有操作系统，在没有任何程序的情况下它根本都跑不起来，
为了让它能够跑起来，我们还必须要借助pc机进行烧录程序等相关工作，开发板才能跑起来。
主要原因：1.嵌入式系统的硬件资源较差，pc机的速度快，资源更丰富，因此能效率开发。
2.嵌入式系统MCU体系结构和指令集不同，因此需要安装交叉编译工具进行编译，这样编译的目标程序才能够在相应的平台上比

交叉开发环境的硬件组成主要由以下几大部分：
1.开发主机
2.目标机（开发板）
3.二者的链接介质，常用的主要有3种方式：(1)串口线 (2)USB线 (3)网线   （SD卡也行）

我们使用的是网线，常用的两个协议
第一：tftp服务：	（基于UDP协议实现）
在这里主要用于实现文件的下载，pc机为服务器，开发板用tftp命令将要测试的bootloader、kernel和文件系统从服务器下载到内存中运行，
就不需要预先烧录到FLASH芯片中了

第二：nfs服务：
这里主要用于网络文件的挂载，就是文件共享。在系统移植中，我们通常会在最后一步制作文件系统，那么这是可以把制作好的文件系统放置
在我们开发主机PC的相应位置，开发板通过nfs服务进行挂载。挂载是自动进行挂载的，bootload启动后，kernel运行起来后会根据我们设置的启动参数进行自动挂载

samba实现的是开发主机上Windows主机和Linux虚拟机之间的文件共享，是一种跨平台的文件共享，方便的实现文件的传输。

================================================================

四、根文件系统的制作
eg：ntfs、ext4、ubifs、jffs2都是文件系统
作用：帮助管理 存储介质 （介质就是flash）
分区：文件索引

拓展：
cpu	：	计算单元

mcu	：	微控制器		微处理器 单片机 （小、弱）
只能执行单任务或简单多任务
里面具有控制器	GPIO控制器、pwm、nvic中断控制器
mcu就是 low cpu + 主板（不完全）

soc	：	片上系统  		cpu 控制器 内存sram srom
soc就是： cpu + 主板 （有内存）